#include "consts.mj"
#include "tools.mj"

fulladder(a,b,c_in) = (s,c_out) where
	t = a ^ b;
	s = t ^ c_in;
	c_out = (a&b) + (t&c_in);
end where

adder<n>(a:[n], b:[n], c_in) = (o:[n], c_out) where
	if n = 0 then
		o = [];
		c_out = c_in;
	else
		(s_n1,c_n1) = adder<n-1>(a[1..],b[1..],c_in);
		(s_n,c_out) = fulladder(a[0],b[0],c_n1);
		o = s_n . s_n1;
	end if
end where

sign_extend<n,p>(i:[n]) = (o:[p]) where
	if n = p then
		o = i;
	else
		o = i[0] . sign_extend<n,p-1>(i);
	end if
end where

alu_unit(a,b,ainv,binv,c_in,op:[3]) = (s,c_out) where

	ai = a ^ ainv;
	bi = b ^ binv;
	
	xor_ab = ai ^ bi;
	or_ab = ai + bi;
	and_ab = ai & bi;
	sum = xor_ab ^ c_in;

	(* 000 - add, 100 - xor, 110 - or, 111 - and *)

	s1 = mux(op[1],mux(op[2],and_ab,or_ab),mux(op[2],false,xor_ab));
	s0 = mux(op[1],false,mux(op[2],false,sum));
	
	s = mux(op[0],s1,s0);
	c_out = and_ab + (ai & c_in) + (bi & c_in);
end where

alu_stack<n>(a:[n],b:[n],ainv,binv,c_in,op:[3]) = (s:[n],c_out) where
	if n = 1 then
		(s,c_out) = alu_unit(a,b,ainv,binv,c_in,op);
	else
		(s_n1,c_n1) = alu_stack<n-1>(a[1..],b[1..],ainv,binv,c_in,op);
		(s_n,c_out) = alu_unit(a[0],b[0],ainv,binv,c_n1,op);
		s = s_n . s_n1;
	end if
end where

alu(a:[WORD_SIZE],b:[WORD_SIZE],op:[4]) = (s:[WORD_SIZE]) where
	
	(s,useless) = alu_stack<WORD_SIZE>(a,b,false,op[0],op[0],op[1..3]);

end where


