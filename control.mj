#include "alu.mj"
#include "regs.mj"
#include "memory.mj"
#include "tools.mj"

(* Pour le moment - seulement LUI et les instructions arithmétiques *)

main() = () where

	(* Instruction *)
	pc = ram<1,ROM_ADDR_SIZE>(0,1,0,new_pc);
	ins = rom<ROM_ADDR_SIZE,WORD_SIZE>(pc);

	(* Informations *)
	opc = ins[25..31];
	rs1 = ins[12..16];
	rs2 = ins[7..11];
	rd  = ins[20..24];

	aluop  = mux_n<4>(jalr, 0.0.0.0, ins[1] . ins[17..19]);
	op_imm = opc[6] & opc[5] & opc[2] & not(opc[4] + opc[3] + opc[1] + opc[0]);
	op     = opc[6] & opc[5] & opc[2] & opc[1] & not(opc[4] + opc[3] + opc[0]);
	lui    = opc[6] & opc[5] & opc[4] & opc[2] & opc[1] & not(opc[3] + opc[0]);
	jal    = opc[6] & opc[5] & opc[4] & opc[3] & opc[1] & opc[0] & not(opc[2]);
	jalr   = opc[6] & opc[5] & opc[4] & opc[1] & opc[0] & not(opc[2] & opc[3]);
	brch	 = opc[6] & opc[5] & opc[1] & opc[0] & not(opc[4] & opc[3] & opc[2]);

	jal_imm  = ins[0] . ins[12..19] . ins[11] . ins[1..10] . 0;
	brch_imm = ins[0] . ins[24] . ins[1..6] . ins[20..23] . 0;
	sw_imm   = ins[0..6] . ins[20..24]
	imm 		 = ins[0..11];

	(* Calculs *)

	(rs1_data,rs2_data) = register_block(rs1,rs2,rd,wr_data,true);
	alu_data2 = mux_n<WORD_SIZE>(op_imm + jalr,sign_extend<12,WORD_SIZE>(imm),rs2_data);
	alu_res = alu(rs1_data,alu_data2,aluop);
	
	(* Mise à jour des informations *)

	inc_pc = adder_nocarry<ROM_ADDR_SIZE>(pc,power<ROM_ADDR_SIZE-3>(0).1.0.0,0);
	
	wr_data = mux_n<WORD_SIZE>(lui,ins[0..19].power<WORD_SIZE-20>(0),
																 mux_n<WORD_SIZE>(jal + jalr,power<WORD_SIZE-ROM_ADDR_SIZE>(0).inc_pc,alu_res));

	jal_pc   = adder_nocarry<ROM_ADDR_SIZE>(pc,jal_imm[(20-ROM_ADDR_SIZE+1)..20],0);
	jalr_pc = alu_res[(WORD_SIZE-ROM_ADDR_SIZE)..(WORD_SIZE-1)];

	new_pc = mux_n<ROM_ADDR_SIZE>(jal, jal_pc, 
					 mux_n<ROM_ADDR_SIZE>(jalr, jalr_pc, inc_pc));

end where

