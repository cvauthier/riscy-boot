alu_block(a,b,ainv,binv,c_in) = (s,c_out) where
	ai = a ^ ainv;
	bi = b ^ binv;
	xor_ab = ai ^ bi;
	or_ab = ai + bi;
	and_ab = ai & bi;
	sum = xor_ab ^ c_in;
	c_out = and_ab + (ai & c_in) + (bi & c_in);



end where

fulladder(a,b,c_in) = (s,c_out) where
	t = a ^ b;
	s = t ^ c_in;
	c_out = (a&b) + (t&c_in);
end where

adder<n>(a:[n], b:[n], c_in) = (o:[n], c_out) where
	if n = 0 then
		o = [];
		c_out = 0;
	else
		(s_n1,c_n1) = adder<n-1>(a[1..],b[1..],c_in);
		(s_n,c_out) = fulladder(a[0],b[0],c_n1);
		o = s_n . s_n1;
	end if
end where

